# -*- coding: utf-8 -*-
"""Task4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aVj_AOpqWCIEX5MJh2yvcmJCo6AraPd8
"""

!pip install textblob scikit-learn matplotlib seaborn nltk

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import nltk
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
from textblob import TextBlob
from nltk.corpus import stopwords
import re
import string

nltk.download('stopwords')

#import the dataset
df=pd.read_excel('/content/movie.csv.xlsx')

print(df)

#Chart Sentiment Distribution
import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='sentiment', data=df_english)
plt.title("Sentiment Distribution of Reviews")
plt.xlabel("Sentiment")
plt.ylabel("Count")
plt.show()

# Filter only English reviews
df_english = df[df['language'] == 'English'].copy()

# Map sentiment
sentiment_map = {'positive': 1, 'neutral': 0, 'negative': -1}
df_english['sentiment_score'] = df_english['sentiment'].map(sentiment_map)

# Top 3 positive reviews
top_positive = df_english[df_english['sentiment_score'] == 1].sort_values(by='user_rating', ascending=False).head(3)
print("Top Positive Reviews:")
print(top_positive[['movie_name', 'user_rating', 'review_text']])

#top 3 movies by user ratings
top_rated = df_english.sort_values(by='user_rating', ascending=False).head(3)
print("Top Rated Movies:")
print(top_rated[['movie_name', 'user_rating']])

#NLP TECHNIQUES
#Technique 1: TF-IDF + Logistic Regression

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report


# Step 1: Select features (X) and target labels (y)
X = df_english['review_text']
y = df_english['sentiment_score']

#  Step 2: Convert text to TF-IDF vectors
tfidf = TfidfVectorizer()
X_tfidf = tfidf.fit_transform(X)

# Step 3: Split data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(
    X_tfidf, y, test_size=0.2, random_state=42
)

# Step 4: Train the Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)           # Train the model using training data

# Step 5: Predict sentiments for the test data
y_pred = model.predict(X_test)

#  Step 6: Print the classification report to evaluate accuracy, precision, recall, etc.
print(classification_report(y_test, y_pred))

#Technique 2: TextBlob Sentiment Score
from textblob import TextBlob

def get_blob_sentiment(text):
    polarity = TextBlob(str(text)).sentiment.polarity
    return 1 if polarity > 0 else (-1 if polarity < 0 else 0)

df_english['textblob_sentiment'] = df_english['review_text'].apply(get_blob_sentiment)

# Compare with actual sentiment
print(df_english[['sentiment_score', 'textblob_sentiment']].head(10))

# Top 3 positive reviews
top_negative = df_english[
    (df_english['sentiment_score'] == -1)
].sort_values(by=['user_rating', 'movie_name'], ascending=[True, True]).head(1)
print("Top negative Reviews:")
print(top_negative[['movie_name', 'user_rating', 'review_text']])